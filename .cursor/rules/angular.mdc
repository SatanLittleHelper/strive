---
description:
globs:
alwaysApply: true
---

You are an expert in TypeScript, Angular, and scalable web application development. You write maintainable, performant, and accessible code following Angular and TypeScript best practices.

## ⚠️ CRITICAL: Template Binding Syntax
**ALWAYS use correct binding syntax in templates:**
- Static strings: `property="value"` (NO square brackets)
- Dynamic values: `[property]="expression"` (WITH square brackets)
- Examples: `formAutosaveKey="custom-key"` ✅, `[formAutosaveKey]="'custom-key'"` ❌
## TypeScript Best Practices
- Use strict type checking
- Prefer type inference when the type is obvious
- Avoid the `any` type; use `unknown` when type is uncertain
## Angular Best Practices
- Always use standalone components over NgModules
- Must NOT set `standalone: true` inside Angular decorators. It's the default.
- Use signals for state management
- Implement lazy loading for feature routes
- Do NOT use the `@HostBinding` and `@HostListener` decorators. Put host bindings inside the `host` object of the `@Component` or `@Directive` decorator instead
- Use `NgOptimizedImage` for all static images.
  - `NgOptimizedImage` does not work for inline base64 images.

## Template Syntax Rules ⚠️ CRITICAL
- **Without square brackets** `property="string"` - for static string values
- **With square brackets** `[property]="expression"` - for dynamic values and expressions
- **Examples:**
  - `label="Static Text"` ✅ (static string)
  - `[value]="dynamicValue"` ✅ (dynamic value)
  - `[isHighlighted]="true"` ✅ (boolean value)
  - `[label]="'Static Text'"` ❌ (unnecessary binding for static string)
  - `formAutosaveKey="custom-key"` ✅ (static string)
  - `[formAutosaveKey]="'custom-key'"` ❌ (unnecessary binding for static string)
## Components
- Keep components small and focused on a single responsibility
- Use `input()` and `output()` functions instead of decorators
- Use `computed()` for derived state
- Set `changeDetection: ChangeDetectionStrategy.OnPush` in `@Component` decorator
- Prefer inline templates for small components
- Prefer Reactive forms instead of Template-driven ones
- Do NOT use `ngClass`, use `class` bindings instead
- DO NOT use `ngStyle`, use `style` bindings instead
## State Management
- Use signals for local component state
- Use `computed()` for derived state
- Keep state transformations pure and predictable
- Do NOT use `mutate` on signals, use `update` or `set` instead
## Templates
- Keep templates simple and avoid complex logic
- Use native control flow (`@if`, `@for`, `@switch`) instead of `*ngIf`, `*ngFor`, `*ngSwitch`
- Use the async pipe to handle observables
- Use BEM for styles
- Use separated files for html and css
## Services
- Design services around a single responsibility
- Use the `providedIn: 'root'` option for singleton services
- Use the `inject()` function instead of constructor injection

## RxJS Subscription Management
- **CRITICAL RULE**: ALWAYS use `takeUntilDestroyed(this.destroyRef)` for consistency and safety
- **Import**: `import { takeUntilDestroyed } from '@angular/core/rxjs-interop';`
- **Required pattern**:
  ```typescript
  // In components and services
  private readonly destroyRef = inject(DestroyRef);
  
  // Then use everywhere:
  observable.pipe(takeUntilDestroyed(this.destroyRef)).subscribe();
  ```
- **Component example**:
  ```typescript
  @Component({...})
  export class MyComponent {
    private readonly destroyRef = inject(DestroyRef);
    private readonly service = inject(MyService);
    
    constructor() {
      this.service.getData().pipe(
        takeUntilDestroyed(this.destroyRef)  // Always with parameter!
      ).subscribe();
    }
    
    onSubmit() {
      this.service.postData().pipe(
        takeUntilDestroyed(this.destroyRef)  // Always with parameter!
      ).subscribe();
    }
  }
  ```
- **Service example**:
  ```typescript
  @Injectable({ providedIn: 'root' })
  export class MyService {
    private readonly destroyRef = inject(DestroyRef);
    private readonly http = inject(HttpClient);
    
    getData(): Observable<any> {
      return this.http.get('/api').pipe(
        takeUntilDestroyed(this.destroyRef)  // Always with parameter!
      );
    }
  }
  ```
- **Why always with parameter**: Prevents NG0203 errors and ensures consistency across all contexts

## API Error Handling
- **CRITICAL RULE**: All API services MUST use `handleApiError` from shared utils
- **Import**: `import { handleApiError } from '@/shared/lib/utils';`
- **Required pattern**:
  ```typescript
  // In all API services
  import { handleApiError } from '@/shared/lib/utils';
  
  // For all HTTP requests:
  this.http.get('/api/endpoint').pipe(
    catchError(handleApiError)
  );
  ```
- **Benefits**:
  - Consistent error handling across all APIs
  - Structured `ApiError` with `code` and `message`
  - Type-safe error processing
  - Centralized error logic
## Common pitfalls
- Control flow (`@if`):
  - You cannot use `as` expressions in `@else if (...)`. E.g. invalid code: `@else if (bla(); as x)`.
- RxJS subscriptions:
  - ALWAYS unsubscribe from RxJS subscriptions to prevent memory leaks
  - Use `takeUntilDestroyed()` for automatic subscription management (preferred)
  - Use `takeUntil` with destroy subject, `take(1)`, or `async` pipe when `takeUntilDestroyed()` is not suitable
  - Implement `OnDestroy` interface and call `unsubscribe()` in `ngOnDestroy()` only when necessary
- Use the `providedIn: 'root'` option for singleton services
- Use the `inject()` function instead of constructor injection
## Common pitfalls
- Control flow (`@if`):
  - You cannot use `as` expressions in `@else if (...)`. E.g. invalid code: `@else if (bla(); as x)`.
- Use the `providedIn: 'root'` option for singleton services
- Use the `inject()` function instead of constructor injection
## Common pitfalls
- Control flow (`@if`):
  - You cannot use `as` expressions in `@else if (...)`. E.g. invalid code: `@else if (bla(); as x)`.