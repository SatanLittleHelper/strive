---
description: Commit message rules and pre-commit checklist for Strive project
globs:
alwaysApply: true
---

# Commit Rules & Pre-commit Checklist

## Commit Message Format

All commit messages must follow this format:
```
[branch-name]: brief summary of changes
```

### Examples:
```
macro: improve back-layout component and fix FSD boundaries
```

**Important**: Keep commit messages concise and descriptive. Focus on the main changes made, not detailed implementation steps.

### Commit Message Quality Rules

- **Be specific**: Describe WHAT was changed, not HOW
- **Be meaningful**: Avoid vague terms like "improve", "fix", "update" without context
- **Include component names**: Mention specific components, services, or features affected
- **Focus on user impact**: What does this change do for the application?

#### Good Examples:
```
macro: add value getters to results-display component
macro: implement null handling in macronutrients-display component
macro: remove unused getMacroCalories method from results-display
```

#### Bad Examples:
```
macro: improve code
macro: fix issues
macro: update components
```

## Pre-commit Checklist

Before making any commit, you MUST complete ALL of the following steps:

> ⚠️ **CRITICAL REMINDER**: Steps 1 and 6 are often forgotten but are MANDATORY!

### 1. ✅ Remove Unnecessary Comments ⚠️ CRITICAL STEP
- **MANDATORY**: Delete ALL unnecessary comments from code before commit
- Use `grep -r "^\s*//" src/` to find all comments in changed files
- Keep only essential documentation comments
- **This step is often forgotten but is required!**

### 2. ✅ Fix Linter Errors
- Run `npm run lint` and fix all errors
- Ensure all files pass linting rules
- Fix TypeScript, Angular, and style linting issues

### 3. ✅ Verify Application Build
- Run `npm run build` and ensure successful compilation
- Fix any build errors or warnings
- Verify all imports and dependencies are correct

### 4. ✅ Check Test Coverage
- Run `npm run test:ci` to check test coverage
- Ensure minimum coverage requirements are met:
  - 80% statements
  - 70% branches  
  - 80% functions
  - 80% lines
- Add tests for new functionality if coverage is insufficient

### 5. ✅ Verify All Tests Pass
- All tests must pass in headless mode
- No tests should be skipped or failing
- Fix any broken tests before committing

### 6. ✅ Update Project Structure Documentation ⚠️ CRITICAL STEP
- **MANDATORY**: Update `.cursor/rules/project-structure.mdc` if project structure changed
- Add new components, services, or features to documentation
- Keep architecture documentation current
- **This step is often forgotten but is required!**

## Important Notes

- **Never commit with failing tests** - even if tests are unrelated to your changes
- **Always run tests in headless mode** - use `npm run test:ci`
- **Commit messages must be in English** and concise (max 3 lines)
- **Include branch name** at the beginning of commit message
- **Do not include test results** in commit message description